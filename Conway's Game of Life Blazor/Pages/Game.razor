@page "/"

<h1>Conway's Game of Life</h1>
<table style="border-spacing: unset;">
    @for (int i = 0; i < gridX; i++)
    {
        int row = i;
        <tr>
            @for (int j = 0; j < gridY; j++)
            {
                int col = j;
                <td @onclick="() => MakeAlive(row, col)" style="border: 1px solid rgb(26, 26, 26); padding: 6px; background-color: @(gameGrid[i, j].IsAlive ? color : "black" )"></td>
            }
        </tr>
    }
</table>
<div style="padding-top: 15px;">
    <button @onclick="Reset">Reset</button>
    <button @onclick="Update">Reset with random values</button>
    <button @onclick="StartGame">@((IsRunning ? "Pause" : "Start"))</button>
    <button @onclick="GenerateNextState">One step forward</button>
</div>
<div>
    <p>Change color</p>
    <button @onclick="ChangeColor">@((color == "red" ? "White" : "Red"))</button>
</div>
@code
{
    private Cell[,] gameGrid;
    string color = "#f2f2f2";

    private static int gridX = 40;
    private static int gridY = 50;
    private bool IsRunning = false;
    private Timer timer;

    public record Cell
    {
        public int Row { get; set; }
        public int Col { get; set; }
        public bool IsAlive { get; set; }
        public bool NextState { get; set; }
    }

    private void MakeAlive(int row, int col)
    {        
        if (!gameGrid[row, col].IsAlive)
        {
            gameGrid[row, col].IsAlive = true;
        }
        else
        {
            gameGrid[row, col].IsAlive = false;          
        }
    }

    protected override void OnInitialized()
    {
        gameGrid = new Cell[gridX, gridY];

        // Fill our matrix with cells on initialization
        for (int i = 0; i < gridX; i++)
        {
            for (int j = 0; j < gridY; j++)
            {
                Cell cell = new Cell
                    {
                        Row = i,
                        Col = j
                    };
                gameGrid[i, j] = cell;
            }
        }
    }

    private void StartGame()
    {
        IsRunning = !IsRunning;

        if (IsRunning)
        {
            // Start the timer to repeat the action
            timer = new Timer(state => GenerateNextState(), null, TimeSpan.Zero, TimeSpan.FromSeconds(0.02));
        }
        else
        {
            // Stop the timer
            timer?.Dispose();
        }
    }

    private void GenerateNextState()
    {
        // Apply Game of Life rules to our next state.
        foreach (var cell in gameGrid)
        {
            int alive = AliveNeighbours(cell);
            if (cell.IsAlive)
            {
                if (alive < 2 || alive > 3)
                {
                    cell.NextState = false;
                }
                else
                {
                    cell.NextState = true;
                }
            }
            else
            {
                if (alive == 3)
                {
                    cell.NextState = true;
                }
            }
        }
        foreach (var cell in gameGrid)
        {
            cell.IsAlive = cell.NextState;
        }
        StateHasChanged();
    }

    private int AliveNeighbours(Cell cell)
    {
        int row = cell.Row;
        int col = cell.Col;
        int counter = 0;

        // Coordinates of the surrounding indexes.
        int[] rows = { -1, -1, -1, 0, 0, 1, 1, 1 };
        int[] cols = { -1, 0, 1, -1, 1, -1, 0, 1 };

        // Check every surrounding index for any alive cells.
        for (int i = 0; i < 8; i++)
        {
            int newRow = row + rows[i];
            int newCol = col + cols[i];

            if (IsValidIndex(newRow, newCol) && gameGrid[newRow, newCol].IsAlive)
            {
                counter++;
            }
        }
        return counter;
    }

    private static bool IsValidIndex(int row, int col)
    {
        // Check if index is out of range.
        return row >= 0 && row < gridX && col >= 0 && col < gridY;
    }

    private void Update()
    {      
        foreach (var cell in gameGrid)
        {
            cell.IsAlive = false;
            cell.NextState = false;
        }

        // Initialize starting grid at random.
        foreach (var cell in gameGrid)
        {
            Random random = new Random();
            if (random.Next(100) >= 90)
            {
                cell.IsAlive = true;
            }
        }
    }

    private void Reset()
    {
        // Clear the grid.
        foreach (var cell in gameGrid)
        {
            cell.IsAlive = false;
            cell.NextState = false;
        }
        IsRunning = false;
        timer?.Dispose();
    }

    private async Task ChangeColor()
    {
        if (color == "#f2f2f2")
        {
            color = "red";

        }
        else
        {
            color = "#f2f2f2";
        }
    }    
}